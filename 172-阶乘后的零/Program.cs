using System;

namespace _172_阶乘后的零
{
    class Program
    {
        /// <summary>
        /// 给定一个整数 n ，返回 n! 结果中尾随零的数量。
        /// 提示 n! = n* (n - 1) * (n - 2) * ... * 3 * 2 * 1
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            var res = TrailingZeroes(103);
        }

        /// <summary>
        /// 首先末尾有多少个 0 ，只需要给当前数乘以一个 10 就可以加一个 0。
        /// 再具体对于 5!，也就是 5 * 4 * 3 * 2 * 1 = 120，我们发现结果会有一个 0，原因就是 2 和 5 相乘构成了一个 10。
        /// 而对于 10 的话，其实也只有 2 * 5 可以构成，所以我们只需要找有多少对 2/5。
        /// 11! = 11 * 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 11 * (2 * 5) * 9 * (4 * 2) * 7 * (3 * 2) * (1 * 5) * (2 * 2) * 3 * (1 * 2) * 1
        /// 对于含有 2 的因子的话是 1 * 2, 2 * 2, 3 * 2, 4 * 2 ...
        /// 对于含有 5 的因子的话是 1 * 5, 2 * 5...
        /// 含有 2 的因子每两个出现一次，含有 5 的因子每 5 个出现一次，所有 2 出现的个数远远多于 5，换言之找到一个 5，一定能找到一个 2 与之配对。所以我们只需要找有多少个 5。
        /// 直接的，我们只需要判断每个累乘的数有多少个 5 的因子即可。
        /// </summary>
        /// <param name="n"></param>
        /// <returns></returns>
        public static int TrailingZeroes(int n)
        {
            int count = 0;
            while (n >= 5)
            {

                count += n / 5;
                n /= 5;
            }
            return count;
        }
    }
}
